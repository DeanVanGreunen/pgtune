(function() {
  var Pgtune,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Pgtune = (function() {
    function Pgtune(form, codeOut, alterSystemOut, oldPgkernel) {
      var e;
      this.form = form;
      this.codeOut = codeOut;
      this.alterSystemOut = alterSystemOut;
      this.oldPgkernel = oldPgkernel;
      this._appCacheUpdated = bind(this._appCacheUpdated, this);
      this._initAppcache = bind(this._initAppcache, this);
      this._notSizeValues = bind(this._notSizeValues, this);
      this._formatedValue = bind(this._formatedValue, this);
      this._hightlightCode = bind(this._hightlightCode, this);
      this._kernelSettings = bind(this._kernelSettings, this);
      this._postgresSettings = bind(this._postgresSettings, this);
      this._generateConfig = bind(this._generateConfig, this);
      this._mobileNextButton = bind(this._mobileNextButton, this);
      this._generateConfigForm = bind(this._generateConfigForm, this);
      this.form.submit(this._generateConfigForm);
      if (Modernizr.touch) {
        $('#pgtTotalMemValue').on('keydown', this._mobileNextButton);
        $('#pgtConnectionsValue').on('keydown', this._mobileNextButton);
      }
      this._initAppcache();
      this.constSize = {
        KB: 1024,
        MB: 1048576,
        GB: 1073741824,
        TB: 1099511627776,
        KB_PER_GB: 1048576,
        KB_PER_MB: 1024
      };
      this.conByType = {
        web: 200,
        oltp: 300,
        dw: 20,
        desktop: 5,
        mixed: 100
      };
      try {
        $(document).foundation();
      } catch (error) {
        e = error;
        if (console.warn != null) {
          console.warn("Too old browser with error: " + e);
        }
      }
    }

    Pgtune.prototype._generateConfigForm = function(event) {
      event.preventDefault();
      $('span.clearHintForUser').remove();
      return this._generateConfig();
    };

    Pgtune.prototype._mobileNextButton = function(e) {
      if ((e.which != null) && e.which === 9) {
        return this.form.submit();
      }
    };

    Pgtune.prototype._generateConfig = function() {
      var constForSize, memInSize;
      this.dbVersion = parseFloat($('#pgtDbVersionValue').val());
      this.osType = $('#pgtOsTypeValue').val();
      if (jQuery.inArray(this.osType, ['linux', 'windows']) === -1) {
        this.osType = 'linux';
      }
      this.dbType = $('#pgtDbTypeValue').val();
      if (this.conByType[this.dbType] == null) {
        this.dbType = 'mixed';
        $('#pgtDbTypeValue').val(this.dbType);
      }
      constForSize = this.constSize[$('#pgtTotalMemMeasValue').val()];
      if (constForSize == null) {
        constForSize = this.constSize['GB'];
      }
      memInSize = parseInt($('#pgtTotalMemValue').val(), 10);
      if (memInSize < 1 || memInSize > 9999) {
        memInSize = 2;
        $('#pgtTotalMemValue').val(memInSize);
      }
      this.totalMemory = parseInt(memInSize, 10) * constForSize;
      this._postgresSettings();
      this._kernelSettings();
      return this._hightlightCode();
    };

    Pgtune.prototype._postgresSettings = function() {
      var arrayConfig, gConfig, infoMsg, key, memoryInKB, ref, settingsInfo, value, workMem;
      gConfig = {
        max_connections: this.conByType[this.dbType]
      };
      if ($('#pgtConnectionsValue').val().length) {
        gConfig['max_connections'] = parseInt($('#pgtConnectionsValue').val(), 10);
      }
      if (gConfig['max_connections'] < 1 || gConfig['max_connections'] > 9999) {
        gConfig['max_connections'] = this.conByType[this.dbType];
      }
      memoryInKB = this.totalMemory / this.constSize['KB'];
      infoMsg = "";
      settingsInfo = [["DB Version", this.dbVersion], ["OS Type", this.osType], ["DB Type", this.dbType], ["Total Memory (RAM)", ($('#pgtTotalMemValue').val()) + " " + ($('#pgtTotalMemMeasValue').val())], ["Number of Connections", gConfig['max_connections']]];
      settingsInfo = settingsInfo.map((function(_this) {
        return function(setting) {
          return "# " + setting[0] + ": " + setting[1];
        };
      })(this));
      if (this.totalMemory >= (256 * this.constSize['MB'])) {
        gConfig['shared_buffers'] = {
          web: Math.floor(memoryInKB / 4),
          oltp: Math.floor(memoryInKB / 4),
          dw: Math.floor(memoryInKB / 4),
          desktop: Math.floor(memoryInKB / 16),
          mixed: Math.floor(memoryInKB / 4)
        }[this.dbType];
        if ('windows' === this.osType && gConfig['shared_buffers'] > (512 * this.constSize['MB'] / this.constSize['KB'])) {
          gConfig['shared_buffers'] = 512 * this.constSize['MB'] / this.constSize['KB'];
        }
        gConfig['effective_cache_size'] = {
          web: Math.floor(memoryInKB * 3 / 4),
          oltp: Math.floor(memoryInKB * 3 / 4),
          dw: Math.floor(memoryInKB * 3 / 4),
          desktop: Math.floor(memoryInKB / 4),
          mixed: Math.floor(memoryInKB * 3 / 4)
        }[this.dbType];
        workMem = (memoryInKB - gConfig['shared_buffers']) / (gConfig['max_connections'] * 3);
        gConfig['work_mem'] = {
          web: Math.floor(workMem),
          oltp: Math.floor(workMem),
          dw: Math.floor(workMem / 2),
          desktop: Math.floor(workMem / 6),
          mixed: Math.floor(workMem / 2)
        }[this.dbType];
        gConfig['maintenance_work_mem'] = {
          web: Math.floor(memoryInKB / 16),
          oltp: Math.floor(memoryInKB / 16),
          dw: Math.floor(memoryInKB / 8),
          desktop: Math.floor(memoryInKB / 16),
          mixed: Math.floor(memoryInKB / 16)
        }[this.dbType];
        if (gConfig['maintenance_work_mem'] > (2 * this.constSize['GB'] / this.constSize['KB'])) {
          gConfig['maintenance_work_mem'] = Math.floor(2 * this.constSize['GB'] / this.constSize['KB']);
        }
        if (this.totalMemory >= (100 * this.constSize['GB'])) {
          infoMsg = "# WARNING\n# this tool not being optimal \n# for very high memory systems\n";
        }
      } else {
        infoMsg = "# WARNING\n# this tool not being optimal \n# for low memory systems\n";
      }
      if (this.dbVersion < 9.5) {
        gConfig['checkpoint_segments'] = {
          web: 32,
          oltp: 64,
          dw: 128,
          desktop: 3,
          mixed: 32
        }[this.dbType];
      } else {
        gConfig['min_wal_size'] = {
          web: 1024 * this.constSize['MB'] / this.constSize['KB'],
          oltp: 2048 * this.constSize['MB'] / this.constSize['KB'],
          dw: 4096 * this.constSize['MB'] / this.constSize['KB'],
          desktop: 100 * this.constSize['MB'] / this.constSize['KB'],
          mixed: 1024 * this.constSize['MB'] / this.constSize['KB']
        }[this.dbType];
        gConfig['max_wal_size'] = {
          web: 2048 * this.constSize['MB'] / this.constSize['KB'],
          oltp: 4096 * this.constSize['MB'] / this.constSize['KB'],
          dw: 8192 * this.constSize['MB'] / this.constSize['KB'],
          desktop: 100 * this.constSize['MB'] / this.constSize['KB'],
          mixed: 2048 * this.constSize['MB'] / this.constSize['KB']
        }[this.dbType];
      }
      gConfig['checkpoint_completion_target'] = {
        web: 0.7,
        oltp: 0.9,
        dw: 0.9,
        desktop: 0.5,
        mixed: 0.9
      }[this.dbType];
      if (gConfig['shared_buffers'] != null) {
        gConfig['wal_buffers'] = Math.floor(3 * gConfig['shared_buffers'] / 100);
        if (gConfig['wal_buffers'] > (16 * this.constSize['MB'] / this.constSize['KB'])) {
          gConfig['wal_buffers'] = Math.floor(16 * this.constSize['MB'] / this.constSize['KB']);
        }
        if (((14 * this.constSize['MB'] / this.constSize['KB']) < (ref = gConfig['wal_buffers']) && ref < (16 * this.constSize['MB'] / this.constSize['KB']))) {
          gConfig['wal_buffers'] = Math.floor(16 * this.constSize['MB'] / this.constSize['KB']);
        }
      }
      gConfig['default_statistics_target'] = {
        web: 100,
        oltp: 100,
        dw: 500,
        desktop: 100,
        mixed: 100
      }[this.dbType];
      arrayConfig = (function() {
        var results;
        results = [];
        for (key in gConfig) {
          value = gConfig[key];
          results.push(key + " = " + (this._formatedValue(key, value)));
        }
        return results;
      }).call(this);
      this.codeOut.text("" + infoMsg + (settingsInfo.join("\n")) + "\n\n" + (arrayConfig.join("\n")));
      if (this.dbVersion >= 9.4) {
        this.alterSystemOut.text("" + (Object.keys(gConfig).map((function(_this) {
          return function(confKey) {
            return "ALTER SYSTEM SET\n " + confKey + " = '" + (_this._formatedValue(confKey, gConfig[confKey])) + "';";
          };
        })(this)).join("\n")));
        return $('.settings-alter-system-block').show();
      } else {
        this.alterSystemOut.text('');
        return $('.settings-alter-system-block').hide();
      }
    };

    Pgtune.prototype._kernelSettings = function() {
      var gConfig, kernelBlockEl, shmall;
      kernelBlockEl = $('#oldPostgresBlock');
      if ('windows' === this.osType || this.dbVersion > 9.3) {
        return kernelBlockEl.hide();
      } else {
        shmall = Math.floor(this.totalMemory / 8192);
        gConfig = "kernel.shmmax=" + (shmall * 4096) + "\nkernel.shmall=" + shmall;
        this.oldPgkernel.text(gConfig);
        kernelBlockEl.find('.pg_version').text(this.dbVersion);
        return kernelBlockEl.show();
      }
    };

    Pgtune.prototype._hightlightCode = function() {
      return $('pre code').each(function(i, e) {
        $(e).removeClass('hljs');
        return hljs.highlightBlock(e);
      });
    };

    Pgtune.prototype._formatedValue = function(key, value) {
      var unit;
      if (jQuery.inArray(key, this._notSizeValues()) !== -1) {
        return "" + value;
      }
      if (value % this.constSize['KB_PER_GB'] === 0) {
        value = Math.floor(value / this.constSize['KB_PER_GB']);
        unit = "GB";
      } else if (value % this.constSize['KB_PER_MB'] === 0) {
        value = Math.floor(value / this.constSize['KB_PER_MB']);
        unit = "MB";
      } else {
        unit = "kB";
      }
      return "" + value + unit;
    };

    Pgtune.prototype._notSizeValues = function() {
      return ['max_connections', 'checkpoint_segments', 'checkpoint_completion_target', 'default_statistics_target', 'random_page_cost', 'seq_page_cost'];
    };

    Pgtune.prototype._initAppcache = function() {
      if (Modernizr.applicationcache !== true) {
        return;
      }
      return window.applicationCache.addEventListener('updateready', this._appCacheUpdated, false);
    };

    Pgtune.prototype._appCacheUpdated = function(e) {
      if (window.applicationCache.status !== window.applicationCache.UPDATEREADY) {
        return;
      }
      if (confirm('A new version of this app is available. Load it?')) {
        return window.location.reload();
      }
    };

    return Pgtune;

  })();

  $(function() {
    return new Pgtune($('#pgTuneForm'), $('#postgresConfigOut'), $('#postgresAlterSystemOut'), $('#postgresOldkernelOut'));
  });

}).call(this);
